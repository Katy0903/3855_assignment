
services:

  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - mynetwork
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
  kafka:
    image: wurstmeister/kafka
    command: >
      sh -c "rm -f /kafka/*/meta.properties && start-kafka.sh"
    # ports:
      # - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" 
      KAFKA_ADVERTISED_HOST_NAME: kafka 
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/kafka
    depends_on:
      - "zookeeper"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      retries: 5
      start_period: 1s
      timeout: 1s
    networks:
      - mynetwork


  db:
    image: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_USER: katy
      MYSQL_PASSWORD: Password
      MYSQL_DATABASE: acit3855_db
    # ports:
    #   - 3307:3306
    volumes:
      - ./data/database:/var/lib/mysql 
    networks:
      - mynetwork
  
    healthcheck:
      test: ["CMD", "mysql", "-u", "katy", "-pPassword", "-e", "SHOW DATABASES;"]
      interval: 5s
      retries: 50
      start_period: 1s
      timeout: 1s


  receiver:
    build:
      context: ./receiver
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: "no"
    # ports:
    #   - "8080:8080"  
    volumes:
      - ./config/test/receiver:/app/config
      - ./logs:/app/logs
    depends_on:
      - kafka  
    networks:
      - mynetwork
    deploy:
      replicas: 1

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: "no"
    # ports:
      # - "8090:8090"  
    volumes:
      - ./config/test/storage:/app/config
      - ./logs:/app/logs
    networks:
      - mynetwork
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy



  processing:
    build:
      context: ./processing
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: "no"
    # ports:
    #   - "8100:8100" 
    volumes:
      - ./config/test/processing:/app/config
      - ./logs:/app/logs
      - ./data/processing:/app/data 
    networks:
      - mynetwork
    depends_on:
      - storage  


  analyzer:
    build:
      context: ./analyzer
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: "no"
    # ports:
    #   - "8110:8110"  
    volumes:
      - ./config/test/analyzer:/app/config
      - ./logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    networks:
      - mynetwork

  consistency_check:
    build:
      context: ./consistency_check
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: "no"
    # ports:
    #   - "8111:8111" 
    volumes:
      - ./config/test/consistency_check:/app/config
      - ./logs:/app/logs
      - ./data/consistency_check:/app/data 
    networks:
      - mynetwork
    depends_on:
      - storage  
      - analyzer
      - processing

  anomaly_detector:
    build:
      context: ./anomaly_detector
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: "no"
    # ports:
    #   - "8200:8200" 
    volumes:
      - ./config/test/anomaly_detector:/app/config
      - ./logs:/app/logs
      - ./data/anomaly_detector:/app/data 
    networks:
      - mynetwork
    depends_on:
      - storage  
      - analyzer
      - processing

  nginx:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./config/test/dashboard/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./dashboard:/usr/share/nginx/html
    depends_on:
      - processing
      - storage
      - receiver
      - analyzer
    networks:
      - mynetwork

volumes:
  zookeeper-data: 
networks:
  mynetwork:
    driver: bridge